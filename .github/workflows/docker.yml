name: Build Docker Image

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-west-2
      ECR_REGISTRY: 386503255039.dkr.ecr.us-west-2.amazonaws.com
      ECR_REPOSITORY: dashboard
      IMAGE_TAG: latest
      ECS_CLUSTER: dashboard-cluster
      ECS_SERVICE: dashboard-task-service

    steps:
      - name: ‚¨áÔ∏è Checkout repository
        uses: actions/checkout@v3

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: üîê Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üîê Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: üèóÔ∏è Build and Push Docker image to ECR
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: üì¶ Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: ‚õèÔ∏è Terraform Init & Apply
        run: |
          terraform init
          terraform apply -auto-approve
        working-directory: ./terraform
        
      - name: üöÄ Start ECS Service
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --desired-count 1 \
            --region $AWS_REGION

      # Optional: Run automated tests or health checks here

      - name: üõë Stop ECS Service (Scale to 0)
        if: always()
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --desired-count 0 \
            --region $AWS_REGION